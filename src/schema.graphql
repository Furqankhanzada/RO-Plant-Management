scalar DateTime

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  mobile: String
  mobile_contains: String
  mobile_not: String
  mobile_in: [String!]
}

input ProductWhereInput {
  id: ID
  #All values that are not equal to given value.#
  id_not: ID
  #All values that are contained in given list.#
  id_in: [ID!]
  #All values that are not contained in given list.#
  id_not_in: [ID!]

  name: String
  #All values that are not equal to given value.#
  name_not: String
  #All values that are contained in given list.#
  name_in: [String!]
  #All values that are not contained in given list.#
  name_not_in: [String!]
  #All values containing the given string.#
  name_contains: String
  #All values not containing the given string.#
  name_not_contains: String
  #All values starting with the given string.#
  name_starts_with: String
  #All values not starting with the given string.#
  name_not_starts_with: String
  #All values ending with the given string.#
  name_ends_with: String
  #All values not ending with the given string.#
  name_not_ends_with: String
  price: Int
  #All values that are not equal to given value.#
  price_not: Int
  #All values that are contained in given list.#
  price_in: [Int!]
  #All values that are not contained in given list.#
  price_not_in: [Int!]
  #All values less than the given value.#
  price_lt: Int
  #All values less than or equal the given value.#
  price_lte: Int
  #All values greater than the given value.#
  price_gt: Int
  #All values greater than or equal the given value.#
  price_gte: Int
  createdAt: DateTime
  #All values that are not equal to given value.#
  createdAt_not: DateTime
  #All values that are contained in given list.#
  createdAt_in: [DateTime!]
  #All values that are not contained in given list.#
  createdAt_not_in: [DateTime!]
  #All values less than the given value.#
  createdAt_lt: DateTime
  #All values less than or equal the given value.#
  createdAt_lte: DateTime
  #All values greater than the given value.#
  createdAt_gt: DateTime
  #All values greater than or equal the given value.#
  createdAt_gte: DateTime
  updatedAt: DateTime
  #All values that are not equal to given value.#
  updatedAt_not: DateTime
  #All values that are contained in given list.#
  updatedAt_in: [DateTime!]
  #All values that are not contained in given list.#
  updatedAt_not_in: [DateTime!]
  #All values less than the given value.#
  updatedAt_lt: DateTime
  #All values less than or equal the given value.#
  updatedAt_lte: DateTime
  #All values greater than the given value.#
  updatedAt_gt: DateTime
  #All values greater than or equal the given value.#
  updatedAt_gte: DateTime
}


type Query {
  me: User
  customers(where: UserWhereInput): [User]
  products(where: ProductWhereInput): [Product]
}

type Mutation {
  signup(mobile: String!, password: String!, name: String!): AuthPayload!
  login(mobile: String!, password: String!): AuthPayload!
}

type Subscription {
  userSubscription: User
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  name: String
  mobile: String!
  type: UserType
  role: Role!
  address: Address
  discounts: [Discount]
  transactions: [Transaction]
  bottle: Bottle
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserType {
  RESIDENTIAL
  COMMERCIAL
}

enum Role {
  ADMIN
  CUSTOMER
  EMPLOYE
}

type Address {
  id: ID!
  town: String
  area: String
  block: String
  house: String
  location: Location
}

type Location {
  id: ID!
  latitude: Float!
  longitude: Float!
}

type Product {
  id: ID!
  name: String!
  price: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Discount {
  id: ID!
  product: Product!
  discount: Float!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Transaction {
  id: ID!
  type: TransactionType!
  status: TransactionStatus!
  items: [Item!]!
  payment: Payment!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}


type Bottle {
  id: ID!
  balance: Int!
  bottleTransactions: [BottleTransaction]
}

type BottleTransaction {
  id: ID!
  in: Int!
  out: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Item {
  id: ID!
  product: Product!
  quantity: Int!
  discount: Float!
  total: Int!
}

enum TransactionType {
  SELL
  PURCHASE
}

enum TransactionStatus {
  PENDING
  PROCESSING,
  COMPLETED
}

type Payment {
  id: ID!
  paid: Int!
  balance: Int!
  method: PaymentMethod!
  status: PaymentStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHEQUE
}

enum PaymentStatus {
  PAID
  UNPAID
}

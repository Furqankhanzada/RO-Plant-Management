scalar DateTime

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  mobile: String
  mobile_contains: String
  mobile_not: String
  mobile_in: [String!]
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
}

enum LinkOrderByInput {
  createdAt_ASC
  createdAt_DESC
}


input TransactionWhereInput {
  #Logical AND on all given filters.#
  AND: [TransactionWhereInput!]

  #Logical OR on all given filters.#
  OR: [TransactionWhereInput!]

  #Logical NOT on all given filters combined by AND.#
  NOT: [TransactionWhereInput!]
  id: ID

  #All values that are not equal to given value.#
  id_not: ID

  #All values that are contained in given list.#
  id_in: [ID!]

  #All values that are not contained in given list.#
  id_not_in: [ID!]

  #All values less than the given value.#
  id_lt: ID

  #All values less than or equal the given value.#
  id_lte: ID

  #All values greater than the given value.#
  id_gt: ID

  #All values greater than or equal the given value.#
  id_gte: ID

  #All values containing the given string.#
  id_contains: ID

  #All values not containing the given string.#
  id_not_contains: ID

  #All values starting with the given string.#
  id_starts_with: ID

  #All values not starting with the given string.#
  id_not_starts_with: ID

  #All values ending with the given string.#
  id_ends_with: ID

  #All values not ending with the given string.#
  id_not_ends_with: ID
  type: TransactionType

  #All values that are not equal to given value.#
  type_not: TransactionType

  #All values that are contained in given list.#
  type_in: [TransactionType!]

  #All values that are not contained in given list.#
  type_not_in: [TransactionType!]
  status: TransactionStatus

  #All values that are not equal to given value.#
  status_not: TransactionStatus

  #All values that are contained in given list.#
  status_in: [TransactionStatus!]

  #All values that are not contained in given list.#
  status_not_in: [TransactionStatus!]
  createdAt: DateTime

  #All values that are not equal to given value.#
  createdAt_not: DateTime

  #All values that are contained in given list.#
  createdAt_in: [DateTime!]

  #All values that are not contained in given list.#
  createdAt_not_in: [DateTime!]

  #All values less than the given value.#
  createdAt_lt: DateTime

  #All values less than or equal the given value.#
  createdAt_lte: DateTime

  #All values greater than the given value.#
  createdAt_gt: DateTime

  #All values greater than or equal the given value.#
  createdAt_gte: DateTime
  updatedAt: DateTime

  #All values that are not equal to given value.#
  updatedAt_not: DateTime

  #All values that are contained in given list.#
  updatedAt_in: [DateTime!]

  #All values that are not contained in given list.#
  updatedAt_not_in: [DateTime!]

  #All values less than the given value.#
  updatedAt_lt: DateTime

  #All values less than or equal the given value.#
  updatedAt_lte: DateTime

  #All values greater than the given value.#
  updatedAt_gt: DateTime

  #All values greater than or equal the given value.#
  updatedAt_gte: DateTime
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  payment: PaymentWhereInput
  user: UserWhereInput
}

input TransactionWhereUniqueInput {
  id: ID
}

input ItemScalarWhereInput {
  #Logical AND on all given filters.#
  AND: [ItemScalarWhereInput!]

  #Logical OR on all given filters.#
  OR: [ItemScalarWhereInput!]

  #Logical NOT on all given filters combined by AND.#
  NOT: [ItemScalarWhereInput!]
  id: ID

  #All values that are not equal to given value.#
  id_not: ID

  #All values that are contained in given list.#
  id_in: [ID!]

  #All values that are not contained in given list.#
  id_not_in: [ID!]

  #All values less than the given value.#
  id_lt: ID

  #All values less than or equal the given value.#
  id_lte: ID

  #All values greater than the given value.#
  id_gt: ID

  #All values greater than or equal the given value.#
  id_gte: ID

  #All values containing the given string.#
  id_contains: ID

  #All values not containing the given string.#
  id_not_contains: ID

  #All values starting with the given string.#
  id_starts_with: ID

  #All values not starting with the given string.#
  id_not_starts_with: ID

  #All values ending with the given string.#
  id_ends_with: ID

  #All values not ending with the given string.#
  id_not_ends_with: ID
  quantity: Int

  #All values that are not equal to given value.#
  quantity_not: Int

  #All values that are contained in given list.#
  quantity_in: [Int!]

  #All values that are not contained in given list.#
  quantity_not_in: [Int!]

  #All values less than the given value.#
  quantity_lt: Int

  #All values less than or equal the given value.#
  quantity_lte: Int

  #All values greater than the given value.#
  quantity_gt: Int

  #All values greater than or equal the given value.#
  quantity_gte: Int
  discount: Float

  #All values that are not equal to given value.#
  discount_not: Float

  #All values that are contained in given list.#
  discount_in: [Float!]

  #All values that are not contained in given list.#
  discount_not_in: [Float!]

  #All values less than the given value.#
  discount_lt: Float

  #All values less than or equal the given value.#
  discount_lte: Float

  #All values greater than the given value.#
  discount_gt: Float

  #All values greater than or equal the given value.#
  discount_gte: Float
  total: Int

  #All values that are not equal to given value.#
  total_not: Int

  #All values that are contained in given list.#
  total_in: [Int!]

  #All values that are not contained in given list.#
  total_not_in: [Int!]

  #All values less than the given value.#
  total_lt: Int

  #All values less than or equal the given value.#
  total_lte: Int

  #All values greater than the given value.#
  total_gt: Int

  #All values greater than or equal the given value.#
  total_gte: Int
}

input ItemSubscriptionWhereInput {
  #Logical AND on all given filters.#
  AND: [ItemSubscriptionWhereInput!]

  #Logical OR on all given filters.#
  OR: [ItemSubscriptionWhereInput!]

  #Logical NOT on all given filters combined by AND.#
  NOT: [ItemSubscriptionWhereInput!]

  #The subscription event gets dispatched when it's listed in mutation_in#
  #mutation_in: [MutationType!]

  #The subscription event gets only dispatched when one of the updated fields names is included in this list#
  updatedFields_contains: String

  #The subscription event gets only dispatched when all of the field names included in this list have been updated#
  updatedFields_contains_every: [String!]

  #The subscription event gets only dispatched when some of the field names included in this list have been updated#
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemWhereInput {
  #Logical AND on all given filters.#
  AND: [ItemWhereInput!]

  #Logical OR on all given filters.#
  OR: [ItemWhereInput!]

  #Logical NOT on all given filters combined by AND.#
  NOT: [ItemWhereInput!]
  id: ID

  #All values that are not equal to given value.#
  id_not: ID

  #All values that are contained in given list.#
  id_in: [ID!]

  #All values that are not contained in given list.#
  id_not_in: [ID!]

  #All values less than the given value.#
  id_lt: ID

  #All values less than or equal the given value.#
  id_lte: ID

  #All values greater than the given value.#
  id_gt: ID

  #All values greater than or equal the given value.#
  id_gte: ID

  #All values containing the given string.#
  id_contains: ID

  #All values not containing the given string.#
  id_not_contains: ID

  #All values starting with the given string.#
  id_starts_with: ID

  #All values not starting with the given string.#
  id_not_starts_with: ID

  #All values ending with the given string.#
  id_ends_with: ID

  #All values not ending with the given string.#
  id_not_ends_with: ID
  quantity: Int

  #All values that are not equal to given value.#
  quantity_not: Int

  #All values that are contained in given list.#
  quantity_in: [Int!]

  #All values that are not contained in given list.#
  quantity_not_in: [Int!]

  #All values less than the given value.#
  quantity_lt: Int

  #All values less than or equal the given value.#
  quantity_lte: Int

  #All values greater than the given value.#
  quantity_gt: Int

  #All values greater than or equal the given value.#
  quantity_gte: Int
  discount: Float

  #All values that are not equal to given value.#
  discount_not: Float

  #All values that are contained in given list.#
  discount_in: [Float!]

  #All values that are not contained in given list.#
  discount_not_in: [Float!]

  #All values less than the given value.#
  discount_lt: Float

  #All values less than or equal the given value.#
  discount_lte: Float

  #All values greater than the given value.#
  discount_gt: Float

  #All values greater than or equal the given value.#
  discount_gte: Float
  total: Int

  #All values that are not equal to given value.#
  total_not: Int

  #All values that are contained in given list.#
  total_in: [Int!]

  #All values that are not contained in given list.#
  total_not_in: [Int!]

  #All values less than the given value.#
  total_lt: Int

  #All values less than or equal the given value.#
  total_lte: Int

  #All values greater than the given value.#
  total_gt: Int

  #All values greater than or equal the given value.#
  total_gte: Int
  product: ProductWhereInput
}

input ItemCreateInput {
  id: ID
  quantity: Int!
  discount: Float
  total: Int!
  product: ProductCreateOneInput!
  transactionAt: DateTime
  bottleOut: Int
}

input ItemCreateManyInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemUpdateDataInput {
  quantity: Int
  discount: Float
  total: Int
  transactionAt: DateTime
  bottleOut: Int
  product: ProductUpdateOneRequiredInput
}

input ItemUpdateInput {
  quantity: Int
  discount: Float
  total: Int
  product: ProductUpdateOneRequiredInput
}

input ItemUpdateManyDataInput {
  quantity: Int
  discount: Float
  total: Int
}

input ItemUpdateManyInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueNestedInput!]
}

input ItemUpdateManyMutationInput {
  quantity: Int
  discount: Float
  total: Int
}

input ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyDataInput!
}

input ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateDataInput!
}

input ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateDataInput!
  create: ItemCreateInput!
}

input ItemWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  #Logical AND on all given filters.#
  AND: [PaymentWhereInput!]

  #Logical OR on all given filters.#
  OR: [PaymentWhereInput!]

  #Logical NOT on all given filters combined by AND.#
  NOT: [PaymentWhereInput!]
  id: ID

  #All values that are not equal to given value.#
  id_not: ID

  #All values that are contained in given list.#
  id_in: [ID!]

  #All values that are not contained in given list.#
  id_not_in: [ID!]

  #All values less than the given value.#
  id_lt: ID

  #All values less than or equal the given value.#
  id_lte: ID

  #All values greater than the given value.#
  id_gt: ID

  #All values greater than or equal the given value.#
  id_gte: ID

  #All values containing the given string.#
  id_contains: ID

  #All values not containing the given string.#
  id_not_contains: ID

  #All values starting with the given string.#
  id_starts_with: ID

  #All values not starting with the given string.#
  id_not_starts_with: ID

  #All values ending with the given string.#
  id_ends_with: ID

  #All values not ending with the given string.#
  id_not_ends_with: ID
  paid: Int

  #All values that are not equal to given value.#
  paid_not: Int

  #All values that are contained in given list.#
  paid_in: [Int!]

  #All values that are not contained in given list.#
  paid_not_in: [Int!]

  #All values less than the given value.#
  paid_lt: Int

  #All values less than or equal the given value.#
  paid_lte: Int

  #All values greater than the given value.#
  paid_gt: Int

  #All values greater than or equal the given value.#
  paid_gte: Int
  balance: Int

  #All values that are not equal to given value.#
  balance_not: Int

  #All values that are contained in given list.#
  balance_in: [Int!]

  #All values that are not contained in given list.#
  balance_not_in: [Int!]

  #All values less than the given value.#
  balance_lt: Int

  #All values less than or equal the given value.#
  balance_lte: Int

  #All values greater than the given value.#
  balance_gt: Int

  #All values greater than or equal the given value.#
  balance_gte: Int
  method: PaymentMethod

  #All values that are not equal to given value.#
  method_not: PaymentMethod

  #All values that are contained in given list.#
  method_in: [PaymentMethod!]

  #All values that are not contained in given list.#
  method_not_in: [PaymentMethod!]
  status: PaymentStatus

  #All values that are not equal to given value.#
  status_not: PaymentStatus

  #All values that are contained in given list.#
  status_in: [PaymentStatus!]

  #All values that are not contained in given list.#
  status_not_in: [PaymentStatus!]
  createdAt: DateTime

  #All values that are not equal to given value.#
  createdAt_not: DateTime

  #All values that are contained in given list.#
  createdAt_in: [DateTime!]

  #All values that are not contained in given list.#
  createdAt_not_in: [DateTime!]

  #All values less than the given value.#
  createdAt_lt: DateTime

  #All values less than or equal the given value.#
  createdAt_lte: DateTime

  #All values greater than the given value.#
  createdAt_gt: DateTime

  #All values greater than or equal the given value.#
  createdAt_gte: DateTime
  updatedAt: DateTime

  #All values that are not equal to given value.#
  updatedAt_not: DateTime

  #All values that are contained in given list.#
  updatedAt_in: [DateTime!]

  #All values that are not contained in given list.#
  updatedAt_not_in: [DateTime!]

  #All values less than the given value.#
  updatedAt_lt: DateTime

  #All values less than or equal the given value.#
  updatedAt_lte: DateTime

  #All values greater than the given value.#
  updatedAt_gt: DateTime

  #All values greater than or equal the given value.#
  updatedAt_gte: DateTime
}


input ProductWhereInput {
  id: ID
  #All values that are not equal to given value.#
  id_not: ID
  #All values that are contained in given list.#
  id_in: [ID!]
  #All values that are not contained in given list.#
  id_not_in: [ID!]

  name: String
  #All values that are not equal to given value.#
  name_not: String
  #All values that are contained in given list.#
  name_in: [String!]
  #All values that are not contained in given list.#
  name_not_in: [String!]
  #All values containing the given string.#
  name_contains: String
  #All values not containing the given string.#
  name_not_contains: String
  #All values starting with the given string.#
  name_starts_with: String
  #All values not starting with the given string.#
  name_not_starts_with: String
  #All values ending with the given string.#
  name_ends_with: String
  #All values not ending with the given string.#
  name_not_ends_with: String
  price: Int
  #All values that are not equal to given value.#
  price_not: Int
  #All values that are contained in given list.#
  price_in: [Int!]
  #All values that are not contained in given list.#
  price_not_in: [Int!]
  #All values less than the given value.#
  price_lt: Int
  #All values less than or equal the given value.#
  price_lte: Int
  #All values greater than the given value.#
  price_gt: Int
  #All values greater than or equal the given value.#
  price_gte: Int
  createdAt: DateTime
  #All values that are not equal to given value.#
  createdAt_not: DateTime
  #All values that are contained in given list.#
  createdAt_in: [DateTime!]
  #All values that are not contained in given list.#
  createdAt_not_in: [DateTime!]
  #All values less than the given value.#
  createdAt_lt: DateTime
  #All values less than or equal the given value.#
  createdAt_lte: DateTime
  #All values greater than the given value.#
  createdAt_gt: DateTime
  #All values greater than or equal the given value.#
  createdAt_gte: DateTime
  updatedAt: DateTime
  #All values that are not equal to given value.#
  updatedAt_not: DateTime
  #All values that are contained in given list.#
  updatedAt_in: [DateTime!]
  #All values that are not contained in given list.#
  updatedAt_not_in: [DateTime!]
  #All values less than the given value.#
  updatedAt_lt: DateTime
  #All values less than or equal the given value.#
  updatedAt_lte: DateTime
  #All values greater than the given value.#
  updatedAt_gt: DateTime
  #All values greater than or equal the given value.#
  updatedAt_gte: DateTime
}

input DiscountScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  discount: Float
  discount_not: Float
  discount_in: [Float!]
  discount_not_in: [Float!]
  discount_lt: Float
  discount_lte: Float
  discount_gt: Float
  discount_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DiscountScalarWhereInput!]
  OR: [DiscountScalarWhereInput!]
  NOT: [DiscountScalarWhereInput!]
}


type Query {
  me: User
  customers(where: UserWhereInput, first: Int): [User]
  products(where: ProductWhereInput): [Product]
  customer(where: UserWhereUniqueInput): User
  transactions(where: TransactionWhereInput, orderBy: LinkOrderByInput): [Transaction]
  transaction(where: TransactionWhereUniqueInput!): Transaction
}

input LocationWhereUniqueInput {
  id: ID
}

input LocationCreateInput {
  latitude: Float!
  longitude: Float!
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressCreateInput {
  town: String
  area: String
  block: String
  house: String
  location: LocationCreateOneInput
}

input AddressCreateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input DiscountCreateInput {
  discount: Float
  product: ProductCreateOneInput!
  user: UserCreateOneWithoutDiscountsInput!
}


input UserCreateOneWithoutDiscountsInput {
  create: UserCreateWithoutDiscountsInput
  connect: UserWhereUniqueInput
}


input UserWhereUniqueInput {
  id: ID
  mobile: String
}

input DiscountWhereUniqueInput {
  id: ID
}


input UserCreateWithoutDiscountsInput {
  name: String
  mobile: String!
  password: String!
  type: UserType
  role: Role
  address: AddressCreateOneInput
}

input DiscountCreateManyWithoutUserInput {
  create: [DiscountCreateWithoutUserInput!]
  connect: [DiscountWhereUniqueInput!]
}

input DiscountCreateWithoutUserInput {
  discount: Float
  product: ProductCreateOneInput!
}

input PaymentWhereUniqueInput {
  id: ID
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductCreateInput {
  name: String!
  price: Int!
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input UserCreateInput {
  name: String
  mobile: String!
  password: String!
  type: UserType
  role: Role
  address: AddressCreateOneInput
  discounts: DiscountCreateManyWithoutUserInput
  bottleBalance: Int
}

type Mutation {
  login(mobile: String!, password: String!): AuthPayload!
  createCustomer(data: UserCreateInput!): User!
  updateCustomer(data: UserUpdateInput!, id: ID): User!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!, userID: ID, bottleBalance: Int, edit: Boolean): Transaction
  createTransaction(data: TransactionCreateInput!, bottleBalance: Int): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteCustomer(where: UserWhereUniqueInput!): User
  createProduct(data: ProductCreateInput!): User!
  deleteProduct(where: ProductWhereUniqueInput!): Product
}

input DiscountUpdateManyWithoutUserInput {
  create: [DiscountCreateWithoutUserInput!]
  delete: [DiscountWhereUniqueInput!]
  connect: [DiscountWhereUniqueInput!]
  set: [DiscountWhereUniqueInput!]
  disconnect: [DiscountWhereUniqueInput!]
  update: [DiscountUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DiscountUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DiscountScalarWhereInput!]
  updateMany: [DiscountUpdateManyWithWhereNestedInput!]
}

input DiscountUpdateManyWithWhereNestedInput {
  where: DiscountScalarWhereInput!
  data: DiscountUpdateManyDataInput!
}

input DiscountUpdateManyDataInput {
  discount: Float
}

input DiscountUpsertWithWhereUniqueWithoutUserInput {
  where: DiscountWhereUniqueInput!
  update: DiscountUpdateWithoutUserDataInput!
  create: DiscountCreateWithoutUserInput!
}


input DiscountUpdateWithoutUserDataInput {
  product: ProductUpdateOneRequiredInput
  discount: Float
}



input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}


input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpdateDataInput {
  name: String
  price: Int
}

input DiscountUpdateWithWhereUniqueWithoutUserInput {
  where: DiscountWhereUniqueInput!
  data: DiscountUpdateWithoutUserDataInput!
}

input AddressUpdateDataInput {
  town: String
  area: String
  block: String
  house: String
  location: LocationUpdateOneInput
}


input LocationUpdateOneInput {
  create: LocationCreateInput
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: LocationWhereUniqueInput
}


input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationUpdateDataInput {
  latitude: Float
  longitude: Float
}

input AddressUpdateOneInput {
  create: AddressCreateInput
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AddressWhereUniqueInput
}

input AddressUpsertNestedInput {
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}


type Subscription {
  userSubscription: User,
  transactionSubscription: Transaction
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  name: String
  mobile: String!
  type: UserType
  role: Role!
  address: Address
  discounts: [Discount]
  transactions(where: TransactionWhereInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  bottleBalance: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserCreateOneWithoutTransactionsInput {
  create: UserCreateWithoutTransactionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTransactionsInput {
  id: ID
  name: String
  mobile: String!
  password: String!
  type: UserType
  role: Role
  address: AddressCreateOneInput
  discounts: DiscountCreateManyWithoutUserInput
  bottleBalance: Int
}

input UserUpdateInput {
  name: String
  mobile: String
  password: String
  type: UserType
  role: Role
  address: AddressUpdateOneInput
  discounts: DiscountUpdateManyWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
  bottleBalance: Int
}

input UserUpdateManyMutationInput {
  name: String
  mobile: String
  password: String
  type: UserType
  role: Role
}

input UserUpdateOneRequiredWithoutDiscountsInput {
  create: UserCreateWithoutDiscountsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutDiscountsDataInput
  upsert: UserUpsertWithoutDiscountsInput
}

input UserUpdateOneRequiredWithoutTransactionsInput {
  create: UserCreateWithoutTransactionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutTransactionsDataInput
  upsert: UserUpsertWithoutTransactionsInput
}

input UserUpdateWithoutDiscountsDataInput {
  name: String
  mobile: String
  password: String
  type: UserType
  role: Role
  address: AddressUpdateOneInput
  transactions: TransactionUpdateManyWithoutUserInput
  bottleBalance: Int!
}

input UserUpdateWithoutTransactionsDataInput {
  name: String
  mobile: String
  password: String
  type: UserType
  role: Role
  address: AddressUpdateOneInput
  discounts: DiscountUpdateManyWithoutUserInput
  bottleBalance: Int!
}

input UserUpsertWithoutDiscountsInput {
  update: UserUpdateWithoutDiscountsDataInput!
  create: UserCreateWithoutDiscountsInput!
}

input UserUpsertWithoutTransactionsInput {
  update: UserUpdateWithoutTransactionsDataInput!
  create: UserCreateWithoutTransactionsInput!
}

enum UserType {
  RESIDENTIAL
  COMMERCIAL
}

enum Role {
  ADMIN
  CUSTOMER
  EMPLOYE
}

type Address {
  id: ID!
  town: String
  area: String
  block: String
  house: String
  location: Location
}

type Location {
  id: ID!
  latitude: Float!
  longitude: Float!
}

type Product {
  id: ID!
  name: String!
  price: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Discount {
  id: ID!
  product: Product!
  discount: Float!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Transaction {
  id: ID!
  type: TransactionType!
  status: TransactionStatus!
  items: [Item!]!
  payment: Payment!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TransactionCreateInput {
  id: ID
  type: TransactionType
  status: TransactionStatus
  items: ItemCreateManyInput
  payment: PaymentCreateOneInput!
  user: UserCreateOneWithoutTransactionsInput!
}

input TransactionCreateManyWithoutUserInput {
  create: [TransactionCreateWithoutUserInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutUserInput {
  id: ID
  type: TransactionType
  status: TransactionStatus
  items: ItemCreateManyInput
  payment: PaymentCreateOneInput!
}

input TransactionUpdateInput {
  type: TransactionType
  status: TransactionStatus
  items: ItemUpdateManyInput
  payment: PaymentUpdateOneRequiredInput
  user: UserUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateManyDataInput {
  type: TransactionType
  status: TransactionStatus
}

input TransactionUpdateManyMutationInput {
  type: TransactionType
  status: TransactionStatus
}

input TransactionUpdateManyWithoutUserInput {
  create: [TransactionCreateWithoutUserInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
  deleteMany: [TransactionScalarWhereInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateWithoutUserDataInput {
  type: TransactionType
  status: TransactionStatus
  items: ItemUpdateManyInput
  payment: PaymentUpdateOneRequiredInput
}

input TransactionUpdateWithWhereUniqueWithoutUserInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutUserDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutUserInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutUserDataInput!
  create: TransactionCreateWithoutUserInput!
}

input PaymentCreateInput {
  id: ID
  paid: Int!
  balance: Int!
  method: PaymentMethod
  status: PaymentStatus
}

input PaymentCreateOneInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
}

input PaymentUpdateDataInput {
  paid: Int
  balance: Int
  method: PaymentMethod
  status: PaymentStatus
}

input PaymentUpdateInput {
  paid: Int
  balance: Int
  method: PaymentMethod
  status: PaymentStatus
}

input PaymentUpdateManyMutationInput {
  paid: Int
  balance: Int
  method: PaymentMethod
  status: PaymentStatus
}

input PaymentUpdateOneRequiredInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
  update: PaymentUpdateDataInput
  upsert: PaymentUpsertNestedInput
}

input PaymentUpsertNestedInput {
  update: PaymentUpdateDataInput!
  create: PaymentCreateInput!
}

type Item {
  id: ID!
  product: Product!
  quantity: Int!
  discount: Float!
  total: Int!
  transactionAt: DateTime!
  bottleOut: Int
}

enum TransactionType {
  SELL
  PURCHASE
}

enum TransactionStatus {
  PENDING
  PROCESSING,
  COMPLETED
}

input TransactionScalarWhereInput {
  #Logical AND on all given filters.#
  AND: [TransactionScalarWhereInput!]

  #Logical OR on all given filters.#
  OR: [TransactionScalarWhereInput!]

  #Logical NOT on all given filters combined by AND.#
  NOT: [TransactionScalarWhereInput!]
  id: ID

  #All values that are not equal to given value.#
  id_not: ID

  #All values that are contained in given list.#
  id_in: [ID!]

  #All values that are not contained in given list.#
  id_not_in: [ID!]

  #All values less than the given value.#
  id_lt: ID

  #All values less than or equal the given value.#
  id_lte: ID

  #All values greater than the given value.#
  id_gt: ID

  #All values greater than or equal the given value.#
  id_gte: ID

  #All values containing the given string.#
  id_contains: ID

  #All values not containing the given string.#
  id_not_contains: ID

  #All values starting with the given string.#
  id_starts_with: ID

  #All values not starting with the given string.#
  id_not_starts_with: ID

  #All values ending with the given string.#
  id_ends_with: ID

  #All values not ending with the given string.#
  id_not_ends_with: ID
  type: TransactionType

  #All values that are not equal to given value.#
  type_not: TransactionType

  #All values that are contained in given list.#
  type_in: [TransactionType!]

  #All values that are not contained in given list.#
  type_not_in: [TransactionType!]
  status: TransactionStatus

  #All values that are not equal to given value.#
  status_not: TransactionStatus

  #All values that are contained in given list.#
  status_in: [TransactionStatus!]

  #All values that are not contained in given list.#
  status_not_in: [TransactionStatus!]
  createdAt: DateTime

  #All values that are not equal to given value.#
  createdAt_not: DateTime

  #All values that are contained in given list.#
  createdAt_in: [DateTime!]

  #All values that are not contained in given list.#
  createdAt_not_in: [DateTime!]

  #All values less than the given value.#
  createdAt_lt: DateTime

  #All values less than or equal the given value.#
  createdAt_lte: DateTime

  #All values greater than the given value.#
  createdAt_gt: DateTime

  #All values greater than or equal the given value.#
  createdAt_gte: DateTime
  updatedAt: DateTime

  #All values that are not equal to given value.#
  updatedAt_not: DateTime

  #All values that are contained in given list.#
  updatedAt_in: [DateTime!]

  #All values that are not contained in given list.#
  updatedAt_not_in: [DateTime!]

  #All values less than the given value.#
  updatedAt_lt: DateTime

  #All values less than or equal the given value.#
  updatedAt_lte: DateTime

  #All values greater than the given value.#
  updatedAt_gt: DateTime

  #All values greater than or equal the given value.#
  updatedAt_gte: DateTime
}


type Payment {
  id: ID!
  paid: Int!
  balance: Int!
  method: PaymentMethod!
  status: PaymentStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHEQUE
}

enum PaymentStatus {
  PAID
  UNPAID
}
